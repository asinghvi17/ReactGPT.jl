var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ReactGPT","category":"page"},{"location":"#ReactGPT","page":"Home","title":"ReactGPT","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ReactGPT.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ReactGPT]","category":"page"},{"location":"#ReactGPT.ReactGPT","page":"Home","title":"ReactGPT.ReactGPT","text":"ReactGPT\n\nThis package was inspired by https://til.simonwillison.net/llms/python-react-pattern, and is a simple implementation of the ReAct LLM pattern in Julia. \n\nThe idea is that we can give LLMs access to the Internet, or to a database,  or really any other resource, by defining a set of actions that the LLM can take.\n\nTheoretically, one could have an EvalAction which lets the LLM run arbitrary Julia code on your computer.  Please don't do this - Julia isn't sandboxed, and the risk that  the model accidentally runs rm(\"/\"; force = true) or some similarly destructive action is really quite high.\n\nUsage\n\nInterface\n\nWe provide an AbstractAction interface which handles most of the stuff.\n\n\n\n\n\n","category":"module"},{"location":"#ReactGPT.AbstractAction","page":"Home","title":"ReactGPT.AbstractAction","text":"AbstractAction\n\nThis is the abstract type for all actions that the LLM can use. Actions must satisfy the action interface, i.e., implement the  following methods:\n\naction_invocation(action::AbstractAction): returns a String describing how the action is invoked.  In future, this should return a regex.\ndescribe_action(action::AbstractAction): returns a string describing the action, which is fed into the intitial prompt to the LLM. \nexecute_action(action::AbstractAction, args::AbstractString): executes the action, and returns a String which is the response to that action.\n\n\n\n\n\n","category":"type"},{"location":"#ReactGPT.MediaWikiAction","page":"Home","title":"ReactGPT.MediaWikiAction","text":"MediaWikiAction(; api_url = \"https://en.wikipedia.org/w/api.php\", name = \"Wikipedia\")\n\nQuery any MediaWiki website.\n\n\n\n\n\n","category":"type"},{"location":"#ReactGPT.WikipediaAction","page":"Home","title":"ReactGPT.WikipediaAction","text":"WikipediaAction()\n\nQuery Wikipedia directly.\n\n\n\n\n\n","category":"type"},{"location":"#ReactGPT.action_invocation-Tuple{AbstractAction}","page":"Home","title":"ReactGPT.action_invocation","text":"action_invocation(action::AbstractAction)\n\nReturns a String describing how the action is invoked.  In future, this should return a regex.\n\n\n\n\n\n","category":"method"},{"location":"#ReactGPT.describe_action-Tuple{AbstractAction}","page":"Home","title":"ReactGPT.describe_action","text":"describe_action(action::AbstractAction)\n\nReturns a string describing the action, which is fed into the intitial prompt to the LLM. \n\n\n\n\n\n","category":"method"},{"location":"#ReactGPT.execute_action-Tuple{AbstractAction, AbstractString}","page":"Home","title":"ReactGPT.execute_action","text":"execute_action(action::AbstractAction, args::AbstractString)\n\nExecutes the action, and returns a String which is the response to that action. The arguments must always be typed as AbstractStrings, in order to accomodate SubStrings parsed from the LLM's response.\n\n\n\n\n\n","category":"method"}]
}
